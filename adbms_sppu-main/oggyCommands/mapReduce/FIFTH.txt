# Create and Insert Data
> use companyDB
> db.createCollection("employees")
> db.employees.insertMany([...])

# Aggregation Example
> db.employees.aggregate([
    { $group: { _id: "$department", totalSalary: { $sum: "$salary" } } }
])
{ "_id": "HR", "totalSalary": 105000 }
{ "_id": "Finance", "totalSalary": 125000 }
{ "_id": "IT", "totalSalary": 70000 }

# Map-Reduce Example
> var mapFunction = function() { emit(this.department, this.salary); };
> var reduceFunction = function(key, values) { return Array.sum(values); };
> db.employees.mapReduce(mapFunction, reduceFunction, { out: "totalDepartmentSalary" })
> db.totalDepartmentSalary.find()
{ "_id": "HR", "value": 105000 }
{ "_id": "Finance", "value": 125000 }
{ "_id": "IT", "value": 70000 }

# Indexing Example
> db.employees.createIndex({ "department": 1 })
> db.employees.createIndex({ "department": 1, "status": 1 })
> db.employees.createIndex({ "empId": 1 }, { unique: true })
> db.employees.createIndex({ "name": "text" })

# Query with and without Index
> db.employees.find({ "department": "Finance", "status": "Active" }).explain("executionStats")
"executionTimeMillis": 5,  "totalKeysExamined": 0, "totalDocsExamined": 5

> db.employees.find({ "department": "Finance", "status": "Active" }).explain("executionStats")
"executionTimeMillis": 1,  "totalKeysExamined": 2, "totalDocsExamined": 2

# Drop Indexes
> db.employees.dropIndex({ "department": 1 })
> db.employees.dropIndex({ "department": 1, "status": 1 })
> db.employees.dropIndexes()
> db.employees.getIndexes()
[
    { "v": 2, "key": { "_id": 1 }, "name": "_id_" }
]
