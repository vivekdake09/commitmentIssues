# Start MongoDB service
sudo systemctl start mongod

# Open MongoDB shell
mongo

# Step 1: Create a database named 'salesDB'
use salesDB

# Step 2: Create a collection named 'orders'
db.createCollection("orders")

# Step 3: Insert sample data into the 'orders' collection
db.orders.insertMany([
    { "orderId": 1, "customerName": "John Doe", "product": "Laptop", "quantity": 2, "price": 1000, "status": "Delivered" },
    { "orderId": 2, "customerName": "Jane Smith", "product": "Smartphone", "quantity": 5, "price": 600, "status": "Pending" },
    { "orderId": 3, "customerName": "Mike Johnson", "product": "Tablet", "quantity": 3, "price": 300, "status": "Delivered" },
    { "orderId": 4, "customerName": "Emily Davis", "product": "Laptop", "quantity": 1, "price": 1000, "status": "Shipped" },
    { "orderId": 5, "customerName": "John Doe", "product": "Smartwatch", "quantity": 2, "price": 200, "status": "Delivered" }
])

# View the inserted documents
db.orders.find()

# Step 4: Aggregation Framework

## Aggregation - Calculate total revenue for all orders
db.orders.aggregate([
    { $group: { _id: null, totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } } } }
])

## Aggregation - Count total number of orders by each customer
db.orders.aggregate([
    { $group: { _id: "$customerName", totalOrders: { $sum: 1 } } }
])

## Aggregation - Average price per product type
db.orders.aggregate([
    { $group: { _id: "$product", avgPrice: { $avg: "$price" } } }
])

## Aggregation - Filter and sort orders by status 'Delivered' and sort by quantity in descending order
db.orders.aggregate([
    { $match: { "status": "Delivered" } },
    { $sort: { "quantity": -1 } }
])

# Part (ii): Map-Reduce Implementation

## Define a map function to map each order by product
var mapFunction = function() { emit(this.product, this.quantity); };

## Define a reduce function to sum the quantities
var reduceFunction = function(key, values) { return Array.sum(values); };

## Execute map-reduce to calculate total quantities ordered per product
db.orders.mapReduce(mapFunction, reduceFunction, { out: "totalQuantities" })

# View the result of map-reduce
db.totalQuantities.find()

# Part (iii): Indexing

## Create an index on the 'customerName' field for faster search
db.orders.createIndex({ "customerName": 1 })

# Verify the index
db.orders.getIndexes()

## Query using indexed field
db.orders.find({ "customerName": "John Doe" })
