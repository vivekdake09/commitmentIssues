

# Step 1: Create a database named 'salesDB'
> use salesDB
switched to db salesDB

# Step 2: Create a collection named 'orders'
> db.createCollection("orders")
{ "ok" : 1 }

# Step 3: Insert sample data into the 'orders' collection
> db.orders.insertMany([
    { "orderId": 1, "customerName": "John Doe", "product": "Laptop", "quantity": 2, "price": 1000, "status": "Delivered" },
    { "orderId": 2, "customerName": "Jane Smith", "product": "Smartphone", "quantity": 5, "price": 600, "status": "Pending" },
    { "orderId": 3, "customerName": "Mike Johnson", "product": "Tablet", "quantity": 3, "price": 300, "status": "Delivered" },
    { "orderId": 4, "customerName": "Emily Davis", "product": "Laptop", "quantity": 1, "price": 1000, "status": "Shipped" },
    { "orderId": 5, "customerName": "John Doe", "product": "Smartwatch", "quantity": 2, "price": 200, "status": "Delivered" }
])
{
    "acknowledged": true,
    "insertedIds": [ ObjectId("..."), ObjectId("..."), ObjectId("..."), ObjectId("..."), ObjectId("...") ]
}

# Aggregation - Calculate total revenue for all orders
> db.orders.aggregate([
    { $group: { _id: null, totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } } } }
])
{ "_id": null, "totalRevenue": 8300 }

# Aggregation - Count total number of orders by each customer
> db.orders.aggregate([
    { $group: { _id: "$customerName", totalOrders: { $sum: 1 } } }
])
{ "_id": "John Doe", "totalOrders": 2 }
{ "_id": "Jane Smith", "totalOrders": 1 }
{ "_id": "Mike Johnson", "totalOrders": 1 }
{ "_id": "Emily Davis", "totalOrders": 1 }

# Aggregation - Average price per product type
> db.orders.aggregate([
    { $group: { _id: "$product", avgPrice: { $avg: "$price" } } }
])
{ "_id": "Laptop", "avgPrice": 1000 }
{ "_id": "Smartphone", "avgPrice": 600 }
{ "_id": "Tablet", "avgPrice": 300 }
{ "_id": "Smartwatch", "avgPrice": 200 }

# Map-Reduce Implementation
> var mapFunction = function() { emit(this.product, this.quantity); };
> var reduceFunction = function(key, values) { return Array.sum(values); };
> db.orders.mapReduce(mapFunction, reduceFunction, { out: "totalQuantities" })
{ "result" : "totalQuantities", "ok" : 1 }

# View map-reduce result
> db.totalQuantities.find()
{ "_id": "Laptop", "value": 3 }
{ "_id": "Smartphone", "value": 5 }
{ "_id": "Tablet", "value": 3 }
{ "_id": "Smartwatch", "value": 2 }

# Indexing on 'customerName'
> db.orders.createIndex({ "customerName": 1 })
{ "createdCollectionAutomatically": false, "numIndexesBefore": 1, "numIndexesAfter": 2, "ok": 1 }

# Verify index
> db.orders.getIndexes()
[
    { "v": 2, "key": { "_id": 1 }, "name": "_id_" },
    { "v": 2, "key": { "customerName": 1 }, "name": "customerName_1" }
]

# Query using indexed field
> db.orders.find({ "customerName": "John Doe" })
{ "_id": ObjectId("..."), "orderId": 1, "customerName": "John Doe", "product": "Laptop" }
{ "_id": ObjectId("..."), "orderId": 5, "customerName": "John Doe", "product": "Smartwatch" }
